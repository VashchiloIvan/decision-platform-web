@using DecisionPlatformWeb.Entity
@model DecisionPlatformWeb.Entity.MultiSolveProcess

@if (Model != null)
{
<div class="steps">
    <div>
        @await Html.PartialAsync("_ProtocolResult", Model.Process)
    </div>
</div>
<div class="solve-buttons">
    @if (!Model.IsFinished)
    {
    <div class="controls">
        @foreach (var control in Model.Controls)
        {
        if (control is InputInfoControl inputControl)
        {
        <div>
            <p>@inputControl.Name</p>
            <input type="@inputControl.InputType" class="form-control" />
        </div>
        }
        else if (control is CriteriaTableInputsInfoControl tableControl)
        {
        <p>@tableControl.Name</p>
        <table class="table table-bordered criteria-table">
            <thead>
            <tr>
                <th>Критерий</th>
                <th>Порог безразличия</th>
                <th>Порог согласия</th>
                <th>Порог вето</th>
            </tr>
            </thead>
            <tbody>
            @for (var i = 0; i < Model.MathModel.getCriteriaList().Count; i++)
            {
            var criterion = Model.MathModel.getCriteriaList()[i];
            <tr>
                <td>@criterion.getName()</td>
                <td><input type="number" class="form-control" name="Indifference_@i" /></td>
                <td><input type="number" class="form-control" name="Preference_@i" /></td>
                <td><input type="number" class="form-control" name="Veto_@i" /></td>
            </tr>
            }
            </tbody>
        </table>
        }
        }
        <div class="invalid-feedback">
        </div>
    </div>

    <div class="multi-buttons mt-2">
        <button class="btn btn-primary make-iteration" type="button">
            Продолжить поиск решения
        </button>
        <button class="btn btn-secondary stop-solving" type="button">
            Завершить поиск
        </button>
    </div>
    }
</div>
}
<script type="text/javascript">
$(function () {
    function makeIteration(e) {
        const controls = $('.controls').children();
        const attributesArray = [];

        console.log("1")
        controls.each(function (index, control) {
            const $control = $(control);

            if ($control.hasClass('criteria-table')) {
                const rows = $control.find('tbody tr');
                const criteriaArray = [];

                rows.each(function (idx, row) {
                    const $row = $(row);
                    const criterionName = $row.find('td').first().text().trim();
                    const indifference = $row.find('input[name="Indifference_' + idx + '"]').val();
                    const preference = $row.find('input[name="Preference_' + idx + '"]').val();
                    const veto = $row.find('input[name="Veto_' + idx + '"]').val();

                    if (indifference === "" || preference === "" || veto === "") {
                        showInvalidMessageOnClickInput(row, ".solve-buttons .controls .invalid-feedback", "Все поля должны быть заполнены");
                        return false;
                    }

                    criteriaArray.push({
                        criterion: criterionName,
                        thresholds: {
                            indifference: parseFloat(indifference),
                            preference: parseFloat(preference),
                            veto: parseFloat(veto)
                        }
                    });
                });
                
                attributesArray.push({
                    type: "CriteriaTableInputsInfoControl",
                    value: JSON.stringify(criteriaArray)
                });

                console.log(attributesArray)
            }
            else if ($control.find('input').length > 0) {
                const name = $control.find('p').text().trim();
                const input = $control.find('input')[0];
                const attributeValue = input.type === 'checkbox' ? input.checked : input.value;

                if (attributeValue === "") {
                    showInvalidMessageOnClickInput(control, ".solve-buttons .controls .invalid-feedback", "Поле должно быть заполнено");
                    return false;
                }

                attributesArray.push({
                    type: "InputInfoControl",
                    name: name,
                    value: attributeValue
                });
            }
        });

        let sendedData = {
            id: '@Model.Guid',
            parameters: attributesArray,
        };

        $.ajax({
            url: "/make-iteration",
            method: "POST",
            data: JSON.stringify(sendedData),
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $(".steps").append(
                    "<div class=\"d-flex justify-content-center div-to-delete mb-5 mt-3\">" +
                    "  <div class=\"spinner-border\" role=\"status\">" +
                    "    <span class=\"visually-hidden\">Loading...</span>" +
                    "  </div>" +
                    "</div>");
            },
            complete: function () {
                $(".div-to-delete").remove();
            },
            success: function(response) {
                $(".solve-buttons").remove();
                $(".steps").addClass("old-steps");
                $(".steps").append(response);
                $(".old-steps").removeClass("steps");
            },
            error: function() {
                console.log("Error on make-iteration");
            }
        });
    }

    function stopSolving (e) {
        let sendedData = {
            "id": '@Model.Guid'
        };
        $.ajax({
            url: "/stop-solving",
            method: "POST",
            data: JSON.stringify(sendedData),
            contentType: "application/json; charset=utf-8",
            success: function(response) {
                $(".multi-buttons").html("<p>Решение завершено досрочно</p>")
                $(".controls").remove();
            },
            error: function() {
                console.log("Error on stop solving")
            }
        });
    }

    $(".make-iteration").on("click", makeIteration)
    $(".stop-solving").on("click", stopSolving)
})
</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>