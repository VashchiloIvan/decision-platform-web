let nuConfig = {}

$(document).ready(function () {
    fetchMethodInfo("nu-config");

    const mathModelTable = new Table("table.nu-mathmodel-table");
    const uncertaintyUl = new UlList("ul.nu-uncertainty-list", "button.nu-add-uncertainty", mathModelTable, false);
    const alternativeUl = new UlList("ul.nu-alternative-list", "button.nu-add-alternative", mathModelTable, true);

    const criteriaList = new CriteriaList('.nu-criterias-select', 'button.nu-add-criteria', nuConfig);

    const solver = new Solver("button.nu-solve", "div.nu-solving", criteriaList, mathModelTable);
})

class Table {
    constructor(selector) {
        this.$table = $(selector);
        this.rows = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–æ–∫
        this.columns = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    addRow(rowName) {
        if (this.rows.has(rowName)) {
            console.warn(`–°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${rowName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
            return;
        }

        this.rows.add(rowName);

        const $row = $('<tr>').attr('data-row-name', rowName);
        $row.append($('<th>').attr('scope', 'row').text(rowName));
        this.columns.forEach(columnName => {
            const $cell = $('<td>').html(`<input type="number" class="form-control" data-row="${rowName}" data-column="${columnName}" />`);
            $row.append($cell);
        });

        this.$table.find('tbody').append($row);
    }

    addRowWithMarks(rowName, marks = []) {
        if (this.rows.has(rowName)) {
            console.warn(`–°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${rowName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
            return;
        }

        this.rows.add(rowName);

        const $row = $('<tr>').attr('data-row-name', rowName);
        $row.append($('<th>').attr('scope', 'row').text(rowName));

        let index = 0;
        this.columns.forEach(columnName => {
            const value = marks[index] != null ? marks[index] : '';
            const $cell = $('<td>').html(
                `<input type="number" class="form-control" data-row="${rowName}" data-column="${columnName}" value="${value}" />`
            );
            $row.append($cell);
            index++;
        });

        this.$table.find('tbody').append($row);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
    addColumn(columnName) {
        if (this.columns.has(columnName)) {
            console.warn(`–°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${columnName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
            return;
        }

        this.columns.add(columnName);

        this.$table.find('thead tr').append($('<th>').text(columnName));

        this.rows.forEach(rowName => {
            const $cell = $('<td>').html(`<input type="number" class="form-control" data-row="${rowName}" data-column="${columnName}" />`);
            this.$table.find(`tr[data-row-name="${rowName}"]`).append($cell);
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    removeRow(rowName) {
        if (!this.rows.has(rowName)) {
            console.warn(`–°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${rowName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            return;
        }

        this.rows.delete(rowName);
        this.$table.find(`tr[data-row-name="${rowName}"]`).remove();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
    removeColumn(columnName) {
        if (!this.columns.has(columnName)) {
            console.warn(`–°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${columnName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }

        this.columns.delete(columnName);

        this.$table.find('thead th').each(function () {
            if ($(this).text() === columnName) {
                $(this).remove();
            }
        });

        this.$table.find(`input[data-column="${columnName}"]`).closest('td').remove();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    getTableData() {
        const uncertainties = this.getUncertainties(); // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        const alternatives = this.getAlternatives(); // –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

        return {
            uncertainties,
            alternatives,
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–µ–π
    getUncertainties() {
        const uncertainties = [];
        this.$table.find('thead th').each(function (index) {
            if (index > 0) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤)
                uncertainties.push($(this).text());
            }
        });
        return uncertainties;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    getAlternatives() {
        const alternatives = {};

        this.$table.find('tbody tr').each(function () {
            const $row = $(this);
            const altName = $row.find('th').text(); // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞)
            const values = [];

            // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            $row.find('td').each(function () {
                const value = parseFloat($(this).find('input').val());
                values.push(value);
            });

            alternatives[altName] = values;
        });

        return alternatives;
    }
}

class UlList {
    constructor(listSelector, addButtonSelector, tableInstance, isRowType) {
        this.$list = $(listSelector);
        this.$addButton = $(addButtonSelector);
        this.table = tableInstance;
        this.isRowType = isRowType;
        this.items = new Set();
        this.initEvents();
    }

    initEvents() {
        this.$addButton.on('click', () => this.addItemFromUi());
    }

    // üìå –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ ‚Äî –∏–∑ UI
    addItemFromUi() {
        const inputValue = this.$addButton.closest('li').find('input').val().trim();

        if (!inputValue) {
            this.showValidationError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ');
            return;
        }

        if (this.items.has(inputValue)) {
            this.showValidationError('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º');
            return;
        }

        if (!inputValue.match(/^[–∞-—è–ê-–Øa-zA-Z0-9\s]+$/)) {
            this.showValidationError('–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã');
            return;
        }

        this.addItem(inputValue); // –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        this.$addButton.closest('li').find('input').val('');
    }

    addItem(name, marks = []) {
        const $newItem = $(`
            <li class="list-group-item">
                <div class="d-flex justify-content-between">
                    <span>${name}</span>
                    <button type="button" class="btn btn-danger btn-sm bi bi-trash" data-toggle="tooltip" title="–£–¥–∞–ª–∏—Ç—å" aria-label="–£–¥–∞–ª–∏—Ç—å"></button>
                </div>
            </li>
        `);

        this.$list.append($newItem);
        this.items.add(name);

        if (this.isRowType) {
            if (marks.length > 0) {
                this.table.addRowWithMarks(name, marks);
            } else {
                this.table.addRow(name);
            }
        } else {
            this.table.addColumn(name);
        }

        $newItem.find('.bi-trash').on('click', () => this.removeItem($newItem, name));
    }

    removeItem($item, name) {
        $item.remove();
        this.items.delete(name);

        if (this.isRowType) {
            this.table.removeRow(name);
        } else {
            this.table.removeColumn(name);
        }
    }

    showValidationError(message) {
        const $input = this.$addButton.closest('li').find('input');
        const $feedback = this.$addButton.closest('li').find('.invalid-feedback');

        $feedback.text(message);
        $input.addClass('is-invalid');
        $feedback.show();

        $input.on('keyup', () => {
            $input.removeClass('is-invalid');
            $feedback.hide();
        });
    }
}

function fetchMethodInfo(url) {
    $.ajax({
        url: url,
        method: "get",
        async: false,
        success: function (data) {
            nuConfig = data;

            console.log("got config:", nuConfig)
        }, error: function (jqXHR, textStatus, errorThrown) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", errorThrown);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

            return null;
        }
    })
}

class CriteriaList {
    constructor(listSelector, addButtonSelector, config) {
        this.$list = $(listSelector); // –°–ø–∏—Å–æ–∫ <ul>
        this.$addButton = $(addButtonSelector); // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.config = config; // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.fillSelect(); // –ó–∞–ø–æ–ª–Ω—è–µ–º select
        this.bindEvents(); // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ select
    fillSelect() {
        const $select = this.$list.find('.form-select');
        $select.empty(); // –û—á–∏—â–∞–µ–º select

        // –î–æ–±–∞–≤–ª—è–µ–º option "Choose..."
        $select.append($('<option>', {
            value: '',
            text: 'Choose...',
            selected: true,
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º option –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        this.config.criterias.forEach(criteria => {
            $select.append($('<option>', {
                value: criteria.method,
                text: criteria.name,
            }));
        });
    }

    // –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è select
        this.$list.on('change', '.form-select', (event) => this.handleSelectChange(event));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.$addButton.on('click', () => this.addListItem());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        this.$list.on('click', '.bi-trash', (event) => this.removeListItem(event));
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è select
    handleSelectChange(event) {
        const $select = $(event.target);
        const selectedMethod = $select.val();
        const $additionalInfo = $select.closest('.list-group-item').find('.additional-info');
        $additionalInfo.empty(); // –û—á–∏—â–∞–µ–º –±–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        if (selectedMethod === '') return;

        // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        const selectedCriteria = this.config.criterias.find(criteria => criteria.method === selectedMethod);

        // –ï—Å–ª–∏ —É –∫—Ä–∏—Ç–µ—Ä–∏—è –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if (selectedCriteria.parameters) {
            selectedCriteria.parameters.forEach(paramKey => {
                const param = this.config.parameters.find(p => p.key === paramKey);
                if (param) {
                    this.addParameterInput($additionalInfo, param);
                }
            });
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ input –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    addParameterInput($container, param) {
        const $inputGroup = $('<div>', {
            class: 'input-group mt-2',
        });

        const $input = $('<input>', {
            type: param.type === 'number' ? 'number' : 'text',
            class: 'form-control',
            placeholder: param.name,
            required: true,
            attr: {
                'data-parameter-value': '', // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            },
        });

        const $feedback = $('<div>', {
            class: 'invalid-feedback',
            text: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ "${param.name}".`,
        });

        $inputGroup.append($input, $feedback);
        $container.append($inputGroup);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç data-parameter-value –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ input
        $input.on('input', () => {
            $input.attr('data-parameter-value', $input.val());
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    addListItem() {
        const $select = this.$list.find('.form-select');
        const selectedMethod = $select.val();

        if (selectedMethod === '') {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        const selectedCriteria = this.config.criterias.find(criteria => criteria.method === selectedMethod);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ input[type="number"]
        let isValid = true;
        this.$list.find('input[type="number"]').each(function () {
            if (!$(this).val()) {
                isValid = false;
                $(this).addClass('is-invalid');
                $(this).siblings('.invalid-feedback').show();

                $(this).on('keyup', () => {
                    $(this).removeClass('is-invalid');
                    $(this).siblings('.invalid-feedback').hide();
                });
            }
        });

        if (!isValid) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        const $newItem = $('<li>', {
            class: 'list-group-item d-flex justify-content-between align-items-center',
        }).append(
            $('<div>', {
                class: 'vals',
            }).append(
                $('<p>', {
                    class: 'name fw-bold',
                    text: selectedCriteria.name,
                    attr: {
                        'data-method': selectedCriteria.method, // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç data-method
                    },
                }),
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                ...(selectedCriteria.parameters
                    ? selectedCriteria.parameters.map(paramKey => {
                        const param = this.config.parameters.find(p => p.key === paramKey);
                        return param
                            ? $('<p>', {
                                text: `${param.name}: ${$select.closest('.list-group-item').find(`input[placeholder="${param.name}"]`).val()}`,
                                attr: {
                                    'data-parameter': param.key,
                                    'data-parameter-value': $select.closest('.list-group-item').find(`input[placeholder="${param.name}"]`).val(),
                                },
                            })
                            : null;
                    })
                    : [])
            ),
            $('<div>').append(
                $('<button>', {
                    type: 'button',
                    class: 'btn btn-danger btn-sm bi bi-trash',
                    'data-toggle': 'tooltip',
                    'data-placement': 'top',
                    title: '–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥',
                    'aria-label': '–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥',
                })
            )
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
        this.$list.append($newItem);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º select –Ω–∞ "Choose..." –∏ –æ—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        $select.val('').trigger('change');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    removeListItem(event) {
        const $button = $(event.target);
        $button.closest('li').remove(); // –£–¥–∞–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <li>
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    getData() {
        const data = [];

        this.$list.find('li').each((index, li) => {
            if (index === 0) {
                return
            }

            const $li = $(li);
            const criteriaName = $li.find('.name').attr('data-method'); // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ data-method
            const parameters = [];

            // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            $li.find('p[data-parameter]').each((i, p) => {
                const $p = $(p);
                const key = $p.attr('data-parameter'); // –ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                const value = $p.attr('data-parameter-value'); // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

                const criteriaParameter = {key, value}

                parameters.push(criteriaParameter);
            });

            data.push({
                criteriaName,
                parameters,
            });
        });

        return data;
    }
}

class Solver {
    constructor(buttonSelector, solveResultSelector, criteriaListInstance, tableInstance) {
        this.$button = $(buttonSelector); // –ö–Ω–æ–ø–∫–∞
        this.$solveResult = $(solveResultSelector) // div –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ü–†
        this.criteriaList = criteriaListInstance; // –≠–∫–∑–µ–º–ø–ª—è—Ä CriteriaList
        this.table = tableInstance; // –≠–∫–∑–µ–º–ø–ª—è—Ä Table
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.bindEvents(); // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    }

    // –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        this.$button.on('click', () => this.solve());
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    solve() {
        const criteriaData = this.criteriaList.getData(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CriteriaList
        const tableData = this.table.getTableData(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Table
        const solveResult = this.$solveResult;

        if (criteriaData.length === 0) {
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        const data = {
            mathModel: tableData,
            criterias: criteriaData,
        };

        console.log(data);

        $.ajax({
            url: '/nu-solve',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            beforeSend: function() {
                solveResult.append(`<div class="d-flex justify-content-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>`);
            },
            success: function(response) {
                solveResult.empty();
                solveResult.append(response);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', textStatus, errorThrown);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                solveResult.empty();
            }
        });
    }
}

class ImportExportHandler {
    constructor(importBtnSelector, exportJsonBtnSelector, exportXmlBtnSelector, endpoints, lists) {
        this.$importBtn = $(importBtnSelector);
        this.$exportJsonBtn = $(exportJsonBtnSelector);
        this.$exportXmlBtn = $(exportXmlBtnSelector);
        this.importEndpoint = endpoints.import;
        this.exportJsonEndpoint = endpoints.exportJson;
        this.exportXmlEndpoint = endpoints.exportXml;

        // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø–∏—Å–∫–∏
        this.uncertaintyUl = lists.uncertaintyUl;
        this.alternativeUl = lists.alternativeUl;
        this.criteriaList = lists.criteriaList;

        this.initEvents();
    }

    initEvents() {
        this.$importBtn.on('click', () => this.handleImport());
        this.$exportJsonBtn.on('click', () => this.handleExport(this.exportJsonEndpoint));
        this.$exportXmlBtn.on('click', () => this.handleExport(this.exportXmlEndpoint));
    }

    handleImport() {
        const $fileInput = $('<input type="file" accept=".json,.xml" style="display: none;">');
        $('body').append($fileInput);

        $fileInput.on('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append("file", file);

            $.ajax({
                url: this.importEndpoint,
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: (data) => this.populateInterface(data),
                error: () => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."),
                complete: () => $fileInput.remove()
            });
        });

        $fileInput.click();
    }

    handleExport(endpoint) {
        window.open(endpoint, '_blank');
    }

    populateInterface(data) {
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        this.clearLists();

        const model = data.mathModel;
        const criterias = data.criterias;

        // –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–µ–π
        if (Array.isArray(model.uncertainties)) {
            model.uncertainties.forEach(u => this.uncertaintyUl.addItem(u));
        }

        // –ò–º–ø–æ—Ä—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        if (model.alternatives && typeof model.alternatives === 'object') {
            for (const [altName, marks] of Object.entries(model.alternatives)) {
                this.alternativeUl.addItem(altName, marks);
            }
        }
        
        // –ò–º–ø–æ—Ä—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if (Array.isArray(criterias)) {
            criterias.forEach(c => {
                const method = c.criteria;
                const params = c.parameters || [];

                const configCriteria = this.criteriaList.config.criterias.find(k => k.method === method);
                if (!configCriteria) return;

                const $newItem = $('<li>', {
                    class: 'list-group-item d-flex justify-content-between align-items-center',
                }).append(
                    $('<div>', { class: 'vals' }).append(
                        $('<p>', {
                            class: 'name fw-bold',
                            text: configCriteria.name,
                            attr: { 'data-method': method },
                        }),
                        ...(params.map(param => {
                            const configParam = this.criteriaList.config.parameters.find(p => p.key === Object.keys(param)[0]);
                            const key = Object.keys(param)[0];
                            const value = param[key];
                            return $('<p>', {
                                text: `${configParam ? configParam.name : key}: ${value}`,
                                attr: {
                                    'data-parameter': key,
                                    'data-parameter-value': value,
                                }
                            });
                        }))
                    ),
                    $('<div>').append(
                        $('<button>', {
                            type: 'button',
                            class: 'btn btn-danger btn-sm bi bi-trash',
                            title: '–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥',
                            'aria-label': '–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥'
                        })
                    )
                );

                this.criteriaList.$list.append($newItem);
            });
        }
    }

    clearLists() {
        this.uncertaintyUl.$list.empty();
        this.uncertaintyUl.items.clear();
        this.alternativeUl.$list.empty();
        this.alternativeUl.items.clear();
        this.criteriaList.$list.find('li:gt(0)').remove(); // –û—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é li —Å —Å–µ–ª–µ–∫—Ç–æ–º
        this.criteriaList.table.clear(); // –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    }
}
